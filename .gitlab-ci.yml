stages:
  - build
  - test
  - deploy_staging
  - test_staging
  - deploy_production
  - post_deploy
  - update_feature_flags # Add this stage

  #- clean-production # I dont want to keep deployment now
  
image_build:
  stage: build
  script:
    - echo "Building Docker image for Canario-Shop"
    - docker build -t canario-shop:$CI_PIPELINE_ID .

code_test:
  stage: test
  script:
    - cd app
    - cat main.py

deploy_staging:
  stage: deploy_staging
  script:
    - docker run -d -p 8000:80 --name canario-shop-staging-$CI_PIPELINE_ID canario-shop:$CI_PIPELINE_ID 
    - docker logs canario-shop-staging-$CI_PIPELINE_ID


test_staging:
  stage: test_staging
  script:
    - sleep 10 
    - curl http://10.196.38.192:8000  

deploy_production1:
   stage: deploy_production
   script:
     - docker stop canario-shop-staging-$CI_PIPELINE_ID
     - docker rm canario-shop-staging-$CI_PIPELINE_ID
    #- docker run -d -p 80 --name canario-shop-production-$CI_PIPELINE_ID canario-shop:$CI_PIPELINE_ID 
    # this can be deplo shop1, can add deploy shop2 with different port.. representing webservers.. down use flags and server them differently
    #- docker run --name canario-shop-production1-$CI_PIPELINE_ID -p 8003:80 -e SHOW_FLASHSALE=1 -e SHOW_PREMIUM=0 -e   USE_MEMCACHE=Y -e MEMCACHE_SERVER=10.196.38.192 -e INFO_PORT=8003 -d canario-shop:$CI_PIPELINE_ID
    #- docker run --name canario-shop-production2-$CI_PIPELINE_ID -p 8004:80 -e SHOW_FLASHSALE=0 -e SHOW_PREMIUM=1 -e   USE_MEMCACHE=Y -e MEMCACHE_SERVER=10.196.38.192 -e INFO_PORT=8004 -d canario-shop:$CI_PIPELINE_ID
    
deploy_production:
  stage: deploy_production
  script:
    - EXISTING_SERVICE_NAME=$(docker service ls | grep "canario-shop-production1" | awk '{print $2}')
    - if [[ ! -z "$EXISTING_SERVICE_NAME" ]]; then 
        echo "Updating existing service $EXISTING_SERVICE_NAME";
        docker service update --env-add SHOW_FLASHSALE=$SHOW_FLASHSALE --env-add SHOW_PREMIUM=$SHOW_PREMIUM --env-add USE_MEMCACHE=$USE_MEMCACHE --label-add updated_at=$(date -u +"%Y%m%d%H%M%S") $EXISTING_SERVICE_NAME;
        echo "Flags:SHOW_FLASHSALE=$SHOW_FLASHSALE, SHOW_PREMIUM=$SHOW_PREMIUM, USE_MEMCACHE=$USE_MEMCACHE"

      else 
        echo "Creating new service canario-shop-production1-$CI_PIPELINE_ID";
        docker service create --replicas=2 --name canario-shop-production1-$CI_PIPELINE_ID -p 8003:80 -e SHOW_FLASHSALE=$SHOW_FLASHSALE -e SHOW_PREMIUM=$SHOW_PREMIUM -e USE_MEMCACHE=$USE_MEMCACHE -e MEMCACHE_SERVER=10.196.38.192 -e INFO_PORT=8003 -d canario-shop:$CI_PIPELINE_ID;
      fi

    - EXISTING_SERVICE_NAME=$(docker service ls | grep "canario-shop-production2" | awk '{print $2}')
    - if [[ ! -z "$EXISTING_SERVICE_NAME" ]]; then 
        echo "Updating existing service $EXISTING_SERVICE_NAME";
        docker service update --force  --env-add SHOW_FLASHSALE=$SHOW_FLASHSALE --env-add SHOW_PREMIUM=$SHOW_PREMIUM --env-add USE_MEMCACHE=$USE_MEMCACHE --label-add updated_at=$(date -u +"%Y%m%d%H%M%S") $EXISTING_SERVICE_NAME;
        echo "Flags:SHOW_FLASHSALE=$SHOW_FLASHSALE, SHOW_PREMIUM=$SHOW_PREMIUM, USE_MEMCACHE=$USE_MEMCACHE"

      else 
        echo "Creating new service canario-shop-production2-$CI_PIPELINE_ID";
        docker service create --replicas=2 --name canario-shop-production2-$CI_PIPELINE_ID -p 8004:80 -e SHOW_FLASHSALE=$SHOW_FLASHSALE -e SHOW_PREMIUM=$SHOW_PREMIUM -e USE_MEMCACHE=$USE_MEMCACHE -e MEMCACHE_SERVER=10.196.38.192 -e INFO_PORT=8004 -d canario-shop:$CI_PIPELINE_ID;
      fi


#deploy_productionFF:
  #stage: deploy_production
  #script:
    #- docker run --name canario-shop-productionFF-$CI_PIPELINE_ID -p 8001:80 -e SHOW_FLASHSALE=1 -e SHOW_PREMIUM=1 -e   USE_MEMCACHE=Y -e MEMCACHE_SERVER=10.196.38.192 -d canario-shop:$CI_PIPELINE_ID

run-caddy:
  stage: deploy_production
  script:
    # Check if a caddy container with a name starting with "caddy-" exists and remove it
    - docker stop $(docker ps -q --filter "publish=80")
    - if docker ps -a | grep -q "caddy-"; then 
        docker rm -f $(docker ps -a -q -f "name=caddy-");
      fi
    # The rest of your caddy setup script
    - echo "http://:80 {" > Caddyfile
    - echo "  reverse_proxy 10.196.38.192:8003 10.196.38.192:8004" >> Caddyfile
    - echo "}" >> Caddyfile
    - docker pull caddy/caddy:latest
    - docker run -d -p 80:80 --name caddy-$CI_PIPELINE_ID -v $(pwd)/Caddyfile:/etc/caddy/Caddyfile caddy/caddy:latest
  
invalidate_feature_flags_cache:
  stage: post_deploy
  script:
    - curl -X POST http://10.196.38.192:8003/invalidate_cache
    - curl -X POST http://10.196.38.192:8004/invalidate_cache
  when: always # This ensures that the cache invalidation happens irrespective of the success/failure of the previous stages.
  allow_failure: true # This ensures that the pipeline doesn't fail if the cache invalidation step fails.

update_hourly_feature_flags:
  stage: update_feature_flags
  script:
    - CURRENT_HOUR=$(date +%H)
    - SHOW_PROMOTION=0
    - if [ $(($CURRENT_HOUR % 2)) -eq 0 ]; then
        SHOW_PROMOTION=1
      fi
    - docker service update --env-add SHOW_PROMOTION=$SHOW_PROMOTION canario-shop-production1
    - docker service update --env-add SHOW_PROMOTION=$SHOW_PROMOTION canario-shop-production2
  when: always # Ensure this runs irrespective of the success/failure of previous stages
  only:
    variables:
      - $CI_COMMIT_REF_NAME == "main" # Only run for the master branch (or any branch you want)

# clean_containers
#     stage: clean-production
#     script:
#       - docker stop canario-shop-production-$CI_PIPELINE_ID
#       - docker rm canario-shop-production-$CI_PIPELINE_ID